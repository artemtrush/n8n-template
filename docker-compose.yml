# Shared configuration for n8n and worker
x-shared: &shared
  restart: always
  image: docker.n8n.io/n8nio/n8n
  environment:
    - N8N_BASIC_AUTH_ACTIVE=${BASIC_AUTH_ACTIVE}
    - N8N_BASIC_AUTH_USER=${BASIC_AUTH_USER}
    - N8N_BASIC_AUTH_PASSWORD=${BASIC_AUTH_PASSWORD}
    - N8N_HOST=${DOMAIN_NAME}
    - N8N_PORT=5678
    - WEBHOOK_URL=https://${DOMAIN_NAME}/
    - N8N_ENCRYPTION_KEY=${ENCRYPTION_KEY}
    - GENERIC_TIMEZONE=${GENERIC_TIMEZONE}
    - DB_TYPE=postgresdb
    - DB_POSTGRESDB_HOST=postgres
    - DB_POSTGRESDB_PORT=5432
    - DB_POSTGRESDB_DATABASE=${POSTGRES_DB}
    - DB_POSTGRESDB_USER=${POSTGRES_NON_ROOT_USER}
    - DB_POSTGRESDB_PASSWORD=${POSTGRES_NON_ROOT_PASSWORD}
    - EXECUTIONS_MODE=queue
    - QUEUE_BULL_REDIS_HOST=redis
    - QUEUE_HEALTH_CHECK_ACTIVE=true
  links:
    - postgres
    - redis
  volumes:
    - ./n8n:/home/node/.n8n
  depends_on:
    redis:
      condition: service_healthy
    postgres:
      condition: service_healthy

services:
  postgres:
    image: postgres:16
    restart: always
    environment:
      - POSTGRES_USER
      - POSTGRES_PASSWORD
      - POSTGRES_DB
      - POSTGRES_NON_ROOT_USER
      - POSTGRES_NON_ROOT_PASSWORD
    volumes:
      - ./postgres:/var/lib/postgresql/data
      - ./scripts/init-postgres.sh:/docker-entrypoint-initdb.d/init-data.sh
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -h localhost -U ${POSTGRES_USER} -d ${POSTGRES_DB}']
      interval: 5s
      timeout: 5s
      retries: 10

  redis:
    image: redis:6-alpine
    restart: always
    volumes:
      - ./redis:/data
    healthcheck:
      test: ['CMD', 'redis-cli', 'ping']
      interval: 5s
      timeout: 5s
      retries: 10

  n8n:
    <<: *shared
    ports:
      - 5678:5678

  n8n-worker:
    <<: *shared
    command: worker
    depends_on:
      - n8n

  nginx:
    image: nginx:stable
    restart: always
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./certbot:/var/www/certbot
      - ./certbot:/etc/letsencrypt
    ports:
      - 80:80
      - 443:443

  certbot:
    image: certbot/certbot
    volumes:
      - ./certbot:/var/www/certbot
      - ./certbot:/etc/letsencrypt
    entrypoint: >
      /bin/sh -c "trap exit TERM;
      while :; do sleep 12h & wait $${!};
      certbot renew --webroot -w /var/www/certbot --quiet;
      done"
